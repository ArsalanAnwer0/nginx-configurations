# Microservices API Gateway Configuration

# Upstream definitions for each microservice
upstream user_service {
    least_conn;
    server 127.0.0.1:3001 weight=1 max_fails=3 fail_timeout=30s;
    server 127.0.0.1:3011 weight=1 max_fails=3 fail_timeout=30s backup;
    keepalive 16;
}

upstream order_service {
    least_conn;
    server 127.0.0.1:3002 weight=1 max_fails=3 fail_timeout=30s;
    server 127.0.0.1:3012 weight=1 max_fails=3 fail_timeout=30s backup;
    keepalive 16;
}

upstream payment_service {
    least_conn;
    server 127.0.0.1:3003 weight=1 max_fails=3 fail_timeout=30s;
    server 127.0.0.1:3013 weight=1 max_fails=3 fail_timeout=30s backup;
    keepalive 16;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api:10m rate=100r/s;
limit_req_zone $binary_remote_addr zone=auth:10m rate=10r/m;
limit_req_zone $binary_remote_addr zone=payments:10m rate=20r/s;

# Connection limiting
limit_conn_zone $binary_remote_addr zone=addr:10m;

# Main API Gateway
server {
    listen 80;
    server_name api.example.com;
    
    # Redirect to HTTPS in production
    # return 301 https://$server_name$request_uri;
    
    # For testing, serve HTTP directly
    
    # Enhanced logging for microservices
    log_format microservices '$remote_addr - $remote_user [$time_local] '
                           '"$request" $status $body_bytes_sent '
                           '"$http_referer" "$http_user_agent" '
                           'service="$upstream_addr" '
                           'response_time=$request_time '
                           'upstream_time=$upstream_response_time';
    
    access_log /var/log/nginx/microservices_access.log microservices;
    error_log /var/log/nginx/microservices_error.log;
    
    # Global rate limiting
    limit_req zone=api burst=200 nodelay;
    limit_conn addr 10;
    
    # CORS headers for web applications
    add_header Access-Control-Allow-Origin "$http_origin" always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept" always;
    add_header Access-Control-Allow-Credentials true always;
    
    # Handle preflight requests
    location ~* ^/api/.* {
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "$http_origin";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept";
            add_header Access-Control-Max-Age 86400;
            add_header Content-Length 0;
            return 204;
        }
    }
    
    # User Service Routes
    location /api/users {
        proxy_pass http://user_service;
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
    }
    
    # Authentication endpoints (stricter rate limiting)
    location /api/auth {
        limit_req zone=auth burst=5 nodelay;
        
        proxy_pass http://user_service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Order Service Routes
    location /api/orders {
        proxy_pass http://order_service;
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    
    # Payment Service Routes (most restricted)
    location /api/payments {
        limit_req zone=payments burst=40 nodelay;
        
        proxy_pass http://payment_service;
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Enhanced security for payments
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
    
    # Health checks for monitoring
    location /health/users {
        access_log off;
        proxy_pass http://user_service/health;
        proxy_connect_timeout 1s;
        proxy_read_timeout 2s;
    }
    
    location /health/orders {
        access_log off;
        proxy_pass http://order_service/health;
        proxy_connect_timeout 1s;
        proxy_read_timeout 2s;
    }
    
    location /health/payments {
        access_log off;
        proxy_pass http://payment_service/health;
        proxy_connect_timeout 1s;
        proxy_read_timeout 2s;
    }
    
    # API Gateway health check
    location /health {
        access_log off;
        return 200 "API Gateway OK\n";
        add_header Content-Type text/plain;
    }
    
    # API Gateway status (admin only)
    location /gateway-status {
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        deny all;
        
        return 200 "API Gateway Status\nUpstream Services: Available\nTime: $time_iso8601\n";
        add_header Content-Type text/plain;
    }
    
    # Block access to admin endpoints
    location ~ /api/.*/admin {
        deny all;
        return 403;
    }
}
