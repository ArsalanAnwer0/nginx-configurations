# Production-Ready Nginx Configuration

# Rate limiting zones for different types of requests
limit_req_zone $binary_remote_addr zone=login:10m rate=1r/m;
limit_req_zone $binary_remote_addr zone=api:10m rate=100r/s;
limit_req_zone $binary_remote_addr zone=general:10m rate=200r/s;

# Connection limiting
limit_conn_zone $binary_remote_addr zone=addr:10m;

# Production server block
server {
    listen 80;
    server_name production.example.com;
    
    # Always redirect HTTP to HTTPS in production
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name production.example.com;
    
    # SSL Configuration (A+ rating)
    ssl_certificate /etc/letsencrypt/live/production.example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/production.example.com/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Security Headers (Essential for production)
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'" always;
    
    # Hide server information
    server_tokens off;
    more_clear_headers Server;
    
    # Logging for production monitoring
    access_log /var/log/nginx/production_access.log;
    error_log /var/log/nginx/production_error.log warn;
    
    # Rate limiting and connection limits
    limit_req zone=general burst=300 nodelay;
    limit_conn addr 20;
    
    # Document root
    root /var/www/production;
    index index.html index.htm;
    
    # Main location block
    location / {
        try_files $uri $uri/ =404;
        
        # Additional security for main content
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
    }
    
    # API endpoints with stricter rate limiting
    location /api/ {
        limit_req zone=api burst=150 nodelay;
        
        # API-specific headers
        add_header Access-Control-Allow-Origin "$http_origin" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
        
        try_files $uri $uri/ =404;
    }
    
    # Login endpoints with very strict limiting
    location ~ ^/(login|register|auth) {
        limit_req zone=login burst=5 nodelay;
        
        # Extra security for authentication
        add_header X-Frame-Options DENY;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        
        try_files $uri $uri/ =404;
    }
    
    # Static assets with aggressive caching
    location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary Accept-Encoding;
        
        # Security headers for static files
        add_header X-Content-Type-Options nosniff;
        
        # Compression for text-based assets
        gzip_static on;
    }
    
    # Block access to sensitive files
    location ~ /\.(ht|git|svn) {
        deny all;
        return 404;
    }
    
    location ~ ~$ {
        deny all;
        return 404;
    }
    
    # Block access to backup files
    location ~ \.(bak|backup|old|tmp)$ {
        deny all;
        return 404;
    }
    
    # Health check endpoint (for monitoring tools)
    location /health {
        access_log off;
        return 200 "OK\n";
        add_header Content-Type text/plain;
    }
    
    # Custom error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        internal;
        root /var/www/errors;
    }
    
    location = /50x.html {
        internal;
        root /var/www/errors;
    }
}
