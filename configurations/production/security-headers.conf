# Security Headers Configuration
# Include this file in your server blocks: include /etc/nginx/security-headers.conf;

# HSTS (HTTP Strict Transport Security)
# Forces browsers to use HTTPS for 1 year
add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

# Prevent clickjacking attacks
add_header X-Frame-Options DENY always;

# Prevent MIME type sniffing
add_header X-Content-Type-Options nosniff always;

# Enable XSS protection in browsers
add_header X-XSS-Protection "1; mode=block" always;

# Control referrer information
add_header Referrer-Policy "strict-origin-when-cross-origin" always;

# Content Security Policy (basic protection)
add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'" always;

# Prevent browsers from caching sensitive pages
add_header Cache-Control "no-cache, no-store, must-revalidate" always;
add_header Pragma "no-cache" always;
add_header Expires "0" always;

# Hide server version information
server_tokens off;

# Additional security for API endpoints
location /api/ {
    # CORS headers for API access
    add_header Access-Control-Allow-Origin "$http_origin" always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
    add_header Access-Control-Allow-Credentials true always;
    
    # Handle preflight requests
    if ($request_method = 'OPTIONS') {
        add_header Access-Control-Allow-Origin "$http_origin";
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With";
        add_header Access-Control-Max-Age 86400;
        add_header Content-Length 0;
        return 204;
    }
}

# Block access to sensitive files and directories
location ~ /\.(ht|git|svn|env) {
    deny all;
    return 404;
}

location ~ \.(sql|log|conf)$ {
    deny all;
    return 404;
}

location ~ ~$ {
    deny all;
    return 404;
}

# Rate limiting for different endpoints
limit_req_zone $binary_remote_addr zone=login_limit:10m rate=1r/m;
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/s;
limit_req_zone $binary_remote_addr zone=general_limit:10m rate=200r/s;

# Apply rate limits to sensitive endpoints
location ~ ^/(login|register|reset-password|admin) {
    limit_req zone=login_limit burst=3 nodelay;
}
